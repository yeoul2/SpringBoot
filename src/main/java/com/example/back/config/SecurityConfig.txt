package com.example.back.config;

import com.example.back.controller.OAuth2LoginSuccessHandler;
import com.example.back.filter.JwtAuthenticationFilter;
import com.example.back.service.UserService;
import com.example.back.service.AuthenticationService;
import com.example.back.service.JWTService;
import com.example.back.dao.UserDao;
import lombok.RequiredArgsConstructor;

import org.springframework.web.filter.CorsFilter;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.example.back.model.Role;

@Configuration
@EnableWebSecurity
@RequiredArgsConstructor
public class SecurityConfig {

    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    private final CorsFilter corsFilter;
    private final UserService userService;
    private final UserDao userDao;
    private final JWTService jwtService;

    // ✅ AuthenticationService를 @Bean으로 등록하여 순환 참조 방지
    @Bean
    public AuthenticationService authenticationService(AuthenticationManager authenticationManager) {
        return new AuthenticationService(userDao, jwtService, authenticationManager, passwordEncoder());
    }

    // ✅ OAuth2LoginSuccessHandler도 @Bean으로 등록
    @Bean
    public OAuth2LoginSuccessHandler oAuth2LoginSuccessHandler(AuthenticationService authenticationService) {
        return new OAuth2LoginSuccessHandler(authenticationService, userDao);
    }

    @Bean
    SecurityFilterChain securityFilterChain(HttpSecurity http, AuthenticationService authenticationService) throws Exception {
        http
            .cors(Customizer.withDefaults())
            .addFilter(corsFilter)
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(requests -> requests
                .requestMatchers("/api/**").permitAll()
                .requestMatchers("/oauth2/**").permitAll()
                .requestMatchers("/login/oauth2/code/google").permitAll()
                .requestMatchers("/api/v1/auth/**").permitAll()
                .requestMatchers("/error").permitAll()
                .requestMatchers("/schedule/**").hasAnyAuthority(Role.ADMIN.name(), Role.USER.name())
                .requestMatchers("/notice/**").hasAnyAuthority(Role.USER.name())
                .requestMatchers("/admin/**").hasAnyAuthority(Role.ADMIN.name())
                .anyRequest().authenticated())

            .oauth2Login(oauth2 -> oauth2
                .loginPage("/oauth2/authorization/google") // ✅ OAuth2 로그인 경로 설정
                .successHandler(oAuth2LoginSuccessHandler(authenticationService))) // ✅ 순환 참조 해결

            .sessionManagement(manager -> manager.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authenticationProvider(authenticationProvider())
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authenticationProvider = new DaoAuthenticationProvider();
        authenticationProvider.setUserDetailsService(userService.userDetailsService());
        authenticationProvider.setPasswordEncoder(passwordEncoder());
        return authenticationProvider;
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
}
