package com.example.back.controller;

import com.example.back.model.JwtAuthenticationResponse;
import com.example.back.model.Role;
import com.example.back.model.SignupRequest;
import com.example.back.service.AuthenticationService;
import lombok.extern.log4j.Log4j2;

import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.stereotype.Component;

import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.util.Map;
import java.util.Optional;

@Log4j2
@Component //Spring이 자동으로 이 클래스를 Bean으로 관리하도록 설정
public class OAuth2LoginSuccessHandler implements AuthenticationSuccessHandler {

    private final AuthenticationService authenticationService;

    public OAuth2LoginSuccessHandler(AuthenticationService authenticationService) {
        this.authenticationService = authenticationService;
    }

    /* ouath2 로그인 성공시 실행되는 메서드 */
    @Override
public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
                                    Authentication authentication) throws IOException, ServletException {
    OAuth2User oauth2User = (OAuth2User) authentication.getPrincipal();
    String provider = request.getRequestURI().contains("naver") ? "naver" : "google";

    String user_email;
    String user_name;
    
    if ("naver".equalsIgnoreCase(provider)) {
        /* Map<String, Object> responseMap = (Map<String, Object>) oauth2User.getAttribute("response");
        user_email = responseMap != null ? (String) responseMap.get("email") : null;
        user_name = responseMap != null ? (String) responseMap.get("name") : "Naver_User"; */
        Map<String, Object> responseMap = Optional.ofNullable((Map<String, Object>) oauth2User.getAttribute("response"))
                                        .orElseThrow(() -> new IllegalArgumentException("❌ 네이버 사용자 정보가 없습니다."));
        user_email = (String) responseMap.getOrDefault("email", "unknown@naver.com");
        user_name = (String) responseMap.getOrDefault("name", "Naver_User");
    } else {
        user_email = oauth2User.getAttribute("email");
        user_name = oauth2User.getAttribute("name");
    }

    if (user_email == null || user_email.isEmpty()) {
        log.error("❌ OAuth2 로그인 오류: 이메일 정보가 없음.");
        throw new IllegalArgumentException("OAuth 로그인한 사용자의 이메일 정보를 찾을 수 없습니다.");
    }
    if (user_name == null || user_name.isEmpty()) {
        user_name = "OAuth2_User";
    }

    try {
        JwtAuthenticationResponse jwtResponse = authenticationService.createJwtForOAuthUser(user_email);
        log.info("✅ JWT 발급 완료 - Email: {}", user_email);

        // ✅ 프론트엔드로 리디렉트
        String redirectUrl = "http://localhost:6006/google/callback"
        + "?accessToken=" + jwtResponse.getAccessToken()
        + "&refreshToken=" + jwtResponse.getRefreshToken();

        response.sendRedirect(redirectUrl);
    } catch (IllegalArgumentException e) {
        log.warn("❌ OAuth 사용자 정보 없음, 자동 회원가입 진행: {}", user_email);

        SignupRequest signupRequest = new SignupRequest();
        signupRequest.setUser_email(user_email);
        signupRequest.setUser_name(user_name);
        signupRequest.setUser_id(user_email);
        signupRequest.setUser_pw("OAUTH2_USER");
        signupRequest.setUser_birth(null);
        signupRequest.setRole(Role.USER);

        authenticationService.signup(signupRequest);
        JwtAuthenticationResponse jwtResponse = authenticationService.createJwtForOAuthUser(user_email);

        // ✅ 프론트엔드로 리디렉트
        String redirectUrl = "http://localhost:6006/google/callback"
                + "?accessToken=" + jwtResponse.getAccessToken()
                + "&refreshToken=" + jwtResponse.getRefreshToken();

            response.sendRedirect(redirectUrl);

            log.info("✅ 자동 회원가입 후 JWT 발급 완료: {}", user_email);
        }
    }

}
