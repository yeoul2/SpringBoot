<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.back.dao.UserDao">

    <!-- 사용자 아이디(user_id)로 찾기 -->
    <select id="findByUsername" parameterType="java.lang.String" resultType="com.example.back.model.User">
        SELECT user_no, user_name, user_email, user_id, user_pw, user_birth, role
        FROM users
        WHERE user_id = #{user_id}
    </select>

    <!-- 사용자 이메일(user_email)로 찾기 --> 
    <select id="findByEmail" parameterType="java.lang.String" resultType="com.example.back.model.User">
        SELECT user_no, user_name, user_email, user_id, user_pw, user_birth, role
        FROM users
        WHERE user_email = #{user_email}
        LIMIT 1
    </select>

    <!-- 아이디 찾기 -->
    <select id="findUserIdByNameAndEmail" parameterType="map" resultType="java.lang.String">
        SELECT user_id 
        FROM users 
        WHERE user_name = #{user_name} 
        AND user_email = #{user_email}
    </select>

    <!-- 비번 찾기 -->
    <select id="findUserPwByIdAndEmail" parameterType="map" resultType="java.lang.Integer">
        SELECT user_no FROM users  <!-- ✅ user_no만 가져오기 -->
        WHERE user_id = #{user_id} AND user_email = #{user_email}
    </select>

    <!-- 비밀번호 업데이트 -->
    <update id="updatePassword">
        UPDATE users SET user_pw = #{user_pw} WHERE user_no = #{user_no}
    </update>

    <!-- 아이디 중복 확인 (COUNT 사용) ✅ -->
    <select id="countByUserId" parameterType="java.lang.String" resultType="int">
        SELECT COUNT(*) FROM users WHERE user_id = #{user_id}
    </select>


    <!-- 회원가입 (SignupRequest 사용) -->
    <insert id="userInsert" parameterType="com.example.back.model.SignupRequest">
    INSERT INTO users (user_name, user_email, user_id, user_pw, user_birth, role)
    VALUES (#{user_name}, #{user_email}, #{user_id}, #{user_pw}, 
    <!-- 해당 값이 null일경우 null추가, 아니면 값을 추가 구글의 경우 생년월일 값을 가져오지 못하므로 null 표시 -->
            <if test="user_birth != null">#{user_birth}</if> 
            <if test="user_birth == null">NULL</if>,
            #{role} )
    </insert>

    <!-- 🔹 이메일 인증 코드 저장 (덮어쓰기) -->
    <insert id="insertVerificationCode" parameterType="map">
        INSERT INTO user_email_verification (user_email, code, expired)
        VALUES (#{user_email}, #{code}, false)
        ON DUPLICATE KEY UPDATE code = #{code}, expired = false, created_at = CURRENT_TIMESTAMP;
    </insert>

    <!-- 🔹 이메일 인증 코드 조회 -->
    <select id="findVerificationCodeByEmail" parameterType="java.lang.String" resultType="java.lang.String">
        SELECT code FROM user_email_verification WHERE user_email = #{user_email} AND expired = false;
    </select>

    <!-- 이메일 인증 여부 확인 -->
    <select id="isEmailVerified" parameterType="java.lang.String" resultType="boolean">
        SELECT email_verified FROM users WHERE user_email = #{user_email} AND role = 'USER'
    </select>

    <!-- ✅ USER 계정 중복 확인 (role = 'USER'인 경우만) -->
    <select id="countByEmail" parameterType="java.lang.String" resultType="int">
        SELECT COUNT(*) FROM users WHERE user_email = #{user_email} AND role = 'USER'
    </select>

    <!-- 🔹 이메일 인증 상태 업데이트 -->
    <update id="updateVerificationStatus" parameterType="java.lang.String">
    UPDATE user_email_verification
    SET expired = true
    WHERE user_email = #{user_email} 
    </update>

    <!-- ✅ 같은 이메일을 가진 계정들의 Role 조회 -->
    <select id="findRolesByEmail" parameterType="java.lang.String" resultType="string">
        SELECT role FROM users WHERE user_email = #{user_email}
    </select>
</mapper>
