<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.back.dao.TripBoardDao">
    <!-- 게시글 조회 (공개된 게시글만) -->
    <select id="tripboardList" resultType="map">
        SELECT tb_photo1, tb_title, tb_star, tb_likes
        FROM trip_board
        WHERE tb_public = 'Y'
        <!-- 검색 기능 -->
        <if test="keyword != null and keyword != ''">
            AND (
            <choose>
                <when test="search == '제목+내용'">
                    tb_title LIKE CONCAT('%', #{keyword}, '%')
                    OR tb_review LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="search == '제목'">
                    tb_title LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <when test="search == '내용'">
                    tb_review LIKE CONCAT('%', #{keyword}, '%')
                </when>
                <otherwise>
                    tb_title LIKE CONCAT('%', #{keyword}, '%')
                    OR tb_review LIKE CONCAT('%', #{keyword}, '%')
                </otherwise>
            </choose>
            )
        </if>
        <!-- 정렬 기준 -->
        ORDER BY
        CASE
        WHEN #{order} = '최신순' THEN tb_no
        WHEN #{order} = '인기순' THEN tb_likes
        WHEN #{order} = '만족도순' THEN tb_star
        ELSE tb_no -- 기본 정렬 기준 설정
        END DESC
    </select>

    <!-- 특정 번호의 게시글 조회 -->
    <select id="tripboardDetial" resultType="map">
        SELECT tb_title, user_id, tb_place, tb_date, tb_date2, tb_review,
               tb_photo1, tb_photo2, tb_photo3, tb_star, tb_likes
        FROM trip_board
        WHERE tb_no = #{tb_no}
    </select>

    <!-- 게시글 추가 -->
    <insert id="tripboardInsert" parameterType="com.example.back.model.TripBoard">
        INSERT INTO trip_board
        <trim prefix="(" suffix=")" suffixOverrides=",">
            user_id, tb_title, tb_place, tb_star, tb_review, tb_public
            <if test="tb_date != null"> ,tb_date </if>
            <if test="tb_date2 != null"> ,tb_date2 </if>
            <if test="tb_photo1 != null"> ,tb_photo1 </if>
            <if test="tb_photo2 != null"> ,tb_photo2 </if>
            <if test="tb_photo3 != null"> ,tb_photo3 </if>
        </trim>
        VALUES
        <trim prefix="(" suffix=")" suffixOverrides=",">
            #{user_id},#{tb_title}, #{tb_place}, #{tb_star}, #{tb_review}, #{tb_public}
            <if test="tb_date != null"> ,#{tb_date} </if>
            <if test="tb_date2 != null"> ,#{tb_date2} </if>
            <if test="tb_photo1 != null"> ,#{tb_photo1} </if>
            <if test="tb_photo2 != null"> ,#{tb_photo2} </if>
            <if test="tb_photo3 != null"> ,#{tb_photo3} </if>
        </trim>
    </insert>

    <!-- 게시글 수정 -->
    <update id="tripboardUpdate" parameterType="com.example.back.model.TripBoard">
        UPDATE trip_board
        <set>
            tb_title = #{tb_title},
            tb_place = #{tb_place},
            tb_star = #{tb_star},
            tb_likes = #{tb_likes},
            tb_review = #{tb_review},
            tb_public = #{tb_public}
            <if test="tb_date != null"> ,tb_date = #{tb_date} </if>
            <if test="tb_date2 != null"> ,tb_date2 = #{tb_date2} </if>
            <if test="tb_photo1 != null"> ,tb_photo1 = #{tb_photo1} </if>
            <if test="tb_photo2 != null"> ,tb_photo2 = #{tb_photo2} </if>
            <if test="tb_photo3 != null"> ,tb_photo3 = #{tb_photo3} </if>
        </set>
        WHERE tb_no = #{tb_no}
    </update>

    <!--게시글 삭제-->
    <delete id="tripboardDelete" >
        DELETE FROM trip_board
        WHERE tb_no = #{tb_no}
    </delete>


    <!--=========================[[ 댓글 처리 SQL ]] ========================-->

    <!--댓글 조회// 대댓글이 원본 댓글 밑에 뜨도록 재정렬 -->
    <select id="commentList" resultType="map">
        WITH RECURSIVE CommentHierarchy AS (
            /*부모 댓글 (최상위 댓글)*/
            SELECT
                tbc_no,
                tbc_comment,
                DATE_FORMAT(tbc_date, '%Y-%m-%d %H:%i:%s') AS formatted_tbc_date   /*날짜 포맷 지정*/,
                user_id,
                parent_tbc_no,
                tb_no,
                tbc_no AS root_no,  /*부모 댓글의 tbc_no를 root_no로 설정*/
                0 AS depth           /*depth 0은 부모 댓글*/
            FROM trip_board_comment
            WHERE parent_tbc_no IS NULL AND tb_no = #{tb_no} -- 특정 게시글의 부모 댓글만 가져오기

            UNION ALL

            /*대댓글 (자식 댓글)*/
            SELECT
                c.tbc_no,
                c.tbc_comment,
                DATE_FORMAT(c.tbc_date, '%Y-%m-%d %H:%i:%s') AS formatted_tbc_date  ,
                c.user_id,
                c.parent_tbc_no,
                c.tb_no,
                h.root_no,   /*부모 댓글의 root_no 유지*/
                h.depth + 1  /*깊이 증가 (들여쓰기 효과)*/
            FROM trip_board_comment c
                     JOIN CommentHierarchy h ON c.parent_tbc_no = h.tbc_no
        )

        SELECT *
        FROM CommentHierarchy
        ORDER BY root_no ASC, depth ASC, tbc_no ASC;
    </select>

    <!--댓글 등록-->
    <insert id="commentInsert" parameterType="map">
        INSERT into trip_board_comment(tbc_comment, user_id, tb_no
        <if test="parent_tbc_no != null"> ,parent_tbc_no</if>
        )
        VALUES( #{tbc_comment}, #{user_id}, #{tb_no}
        <if test="parent_tbc_no != null"> ,#{parent_tbc_no} </if>
        )
    </insert>

    <!--댓글 수정-->
    <update id="commentUpdate" parameterType="map">
        UPDATE trip_board_comment
        SET tbc_comment = #{tbc_comment}
        ,tbc_date = NOW()
        <if test="parent_tbc_no != null"> ,parent_tbc_no = #{parent_tbc_no} </if>
        WHERE tbc_no = #{tbc_no}
    </update>

    <!--댓글 삭제-->
    <delete id="commentDelete" parameterType="int">
        DELETE FROM trip_board_comment
        WHERE tbc_no = #{value}
    </delete>



</mapper>